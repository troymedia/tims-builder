<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx" 
					   xmlns:components="components.*" 
					   xmlns:formUtils="formUtils.*"
					   xmlns:buttons="com.idxd.components.buttons.*"
					   width="100%" minHeight="0"
					   borderAlpha="0"
					   creationComplete="buildComponent()" xmlns:formUtils1="com.idxd.components.formUtils.*">
	<fx:Declarations>
		<fx:String id="titleText"/>
		<fx:String id="headerText"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
//			import components.ToolTipButton;
			import com.idxd.components.buttons.*;
			
			import com.idxd.components.formUtils.SmartButton;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			import mx.controls.ToolTip;
			import mx.events.ToolTipEvent;
			import mx.managers.PopUpManager;
			import mx.states.SetStyle;
			
			import org.osmf.utils.URL;
			
			[Bindable] public var buttonList:ArrayCollection = new ArrayCollection();
			[Bindable] public var buttonBarList:ArrayCollection = new ArrayCollection();
			[Bindable] public var isProductHeader:Boolean = false;
			[Bindable] public var isReviewPhase:Boolean = false;
			public var editButton:EditButton;
			public var actionBtn:SmartButton;
			public var buttonBar:ViewsButtonBar = new ViewsButtonBar();
			public var flipButton:FlipButton;
			public var properties:PropertiesButton;
			
			public function buildComponent(data:*=null):void
			{
				buttonBar.dataProvider = buttonBarList;
				//buttonBar.setStyle('fontWeight', 'bold');
				for each(var s:String in buttonList)
				{
					if(s == 'Flip')
					{
						actionBtn = new FlipButton();
						actionBtn.width = 85;
						actionBtn.label = 'Flip';
					}
					else if(s == 'Edit')
					{
						actionBtn = new EditButton();
						//actionBtn.width = 85;
						actionBtn.label = 'Edit';
					}
					else if(s == 'EditViewFlip')
					{
						actionBtn = new EditFlipButton();
					}
//					else if(s == 'View PDF')
//					{
//						actionBtn = new PDFButton();
//						actionBtn.label = 'PDF';
//						//actionBtn.enabled = isReviewPhase;
//						actionBtn.setStyle('chromeColor', 'red');
//						actionBtn.setStyle('color', 'white');
//						//actionBtn.setStyle('skinClass', ViewPDFButtonSkin);
//					}
					else if(s == 'Zoom')
					{
						actionBtn = new ZoomButton();
						actionBtn.label = 'Zoom';
					}
					else
					{
						actionBtn = new SmartButton();
						actionBtn.label = s;
					}
					actionBtn.setStyle('cornerRadius', 0);
					actionBtn.name = s;
					actionBtn.id = 'btn' + actionBtn.removeSpaces(s);
					actions.addElement(actionBtn);
					actionBtn.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void
					{
						if(s == 'View PDF')
							navigateToURL(new URLRequest('assets/d-1.pdf'));
						trace(e.currentTarget.label);
					});
				}
			}
			
			protected function mouseOverHandler(e:MouseEvent):void
			{
				return;
			}
			
			protected function mouseOutHandler(e:MouseEvent):void
			{
				return;
			}
			
			public function addButton(buttonType:String):void
			{
				this.buttonList.addItem(buttonType);
			}
			
			public function showTip(title:String, e:MouseEvent):void
			{
				var pt:Point = new Point(e.currentTarget.x, e.currentTarget.y);
				pt = e.currentTarget.parent.contentToGlobal(pt);
				editButton = new EditButton();
				editButton.btnText = 'Edit Properties';
				this.addElement(editButton);
				editButton.x = pt.x;
				editButton.y = pt.y + e.currentTarget.height + 10;
				//showLayers
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="develop"/>
		<s:State name="review"/>
	</s:states>
	
	<s:layout>
		<s:HorizontalLayout verticalAlign="middle" paddingLeft="5" paddingRight="5"/>
	</s:layout>
	<s:HGroup width="100%" paddingLeft="5">
		<s:Label id="title" fontSize="12" color="white"  text="{titleText}"/>
		<buttons:PropertiesButton excludeFrom="review"/>
	</s:HGroup>
	<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="center">
		<s:Label  text="{headerText}" visible="{isProductHeader}" color="0xf8f8f8" 
				  horizontalCenter="0" verticalCenter="0"
				  fontWeight="bold" fontSize="18"/>
	</s:HGroup>
	<s:HGroup id="actions" width="100%" gap="5" horizontalAlign="right">
		<!--<buttons:EditButton/>
		<formUtils1:SmartButton label="Actions"/>-->
	</s:HGroup>
	
</s:BorderContainer>