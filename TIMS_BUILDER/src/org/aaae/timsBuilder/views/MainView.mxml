<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 creationComplete="init()" mouseChildren="false" alpha=".45" xmlns:formUtils="com.idxd.components.formUtils.*"
		 >
	
	<fx:Declarations>
		<s:VerticalLayout id="vertical" paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"/>
		<s:Sequence id="moveAndCenter" target="{isoAssessment}" >
			<s:Move xFrom="{selectedAssessmentX}" xTo="{thisParent.width/2}" 
					yFrom="{selectedAssessmentY}" yTo="{thisParent.height/2}" duration="500"/>
			<s:Resize heightFrom="{isoAssessment.height}" heightTo="{stageHeight}" 
					  widthFrom="{isoAssessment.width}" widthTo="{stageWidth}"
					  duration="500"/>
		</s:Sequence>
		<s:Fade id="activate" alphaTo="1" duration="1000" startDelay="600" target="{this}"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			import org.aaae.timsBuilder.components.IETAssessment;
			
			import spark.components.BorderContainer;
			
			[Bindable] protected var thisParent:Object;
			[Bindable] protected var stageHeight:int;
			[Bindable] protected var stageWidth:int;
			[Bindable] protected var selectedAssessmentX:Number;
			[Bindable] protected var selectedAssessmentY:Number;
			
			protected var assessment:IETAssessment;
			[Bindable] protected var isoAssessment:IETAssessment;
			[Bindable] protected var assessments:ArrayCollection = new ArrayCollection();
			
			protected function init():void
			{
				buildGrid();
				thisParent = this.parentApplication;
				stageHeight = thisParent.height;
				stageWidth = thisParent.width;
			}
			
			protected function buildGrid():void
			{
				for(var i:int=0; i < 12; i++)
				{
					assessment = new IETAssessment;
					assessment.id = 'assess' + i;
					assessment.setStyle('backgroundColor', 'red');
					assessment.height = 120;
					assessment.width = 160;
					workspace.addElement(assessment);
					assessments.addItem(assessment);
					assessment.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void { 
						//e.currentTarget.alpha = 0; //create hide() method in Assessment class
						isoAssessment = IETAssessment.clone(assessment);
						selectedAssessmentX = isoAssessment.x = e.currentTarget.x;
						selectedAssessmentY = isoAssessment.y = e.currentTarget.y;
						isoCanvas.addElement(isoAssessment);
						clearUnselectedGridElements(e.currentTarget as BorderContainer);
						isoAssessment.currentState = 'isoView';
						moveAndCenter.play();
					});
				}
			}
			
			protected function clearUnselectedGridElements(elem:BorderContainer):void
			{
				for each(var element:BorderContainer in assessments)
				if(element.id != elem.id)
				{
					workspace.layout = vertical;
					element.visible = false;
					element.includeInLayout = false;
				}
			}
			
			protected function resetGridElements():void
			{
				moveAndCenter.reverse();
			}
			
			// public functions
			public function activateView():void
			{
				activate.play();
				mouseChildren = true;
			}
			
			public function showAlert():void
			{
				//Alert.show('success!');
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="tileView"/>
		<s:State name="listView"/>
		<s:State name="isoView"/>
	</s:states>

	<s:SkinnableContainer id="workspace" height="100%" width="100%" >
		<s:layout>
			<s:TileLayout paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" 
						  orientation="rows" columnAlign="justifyUsingWidth" rowAlign="justifyUsingGap"  
						  horizontalGap="5" verticalGap="5"
						  requestedColumnCount="4" horizontalAlign="center" verticalAlign="middle"/>
		</s:layout>
	</s:SkinnableContainer>
	<s:Group id="isoCanvas" height="100%" width="100%" includeIn="isoView"/>
	
</s:SkinnableContainer>
