<s:BorderContainer backgroundColor="0x333333" cornerRadius="10">
	<fx:Declarations>

</fx:Declarations><fx:Script>
  import com.ecistm.tlpa.models.FeedbackImagesModel;
  import com.ecistm.tlpa.models.LessonModel;
  import com.ecistm.tlpa.models.ResponseTextModel;
  
  import flash.media.*;
  import flash.net.URLRequest;
  
  import mx.collections.ArrayCollection;
  import mx.controls.Alert;
  import mx.controls.RadioButton;
  import mx.rpc.events.FaultEvent;
  import mx.rpc.events.ResultEvent;
  
  
  import mx.rpc.AsyncToken;
  import mx.rpc.http.mxml.HTTPService;
  
  import spark.components.Button;
  import spark.components.NavigatorContent;
  import spark.components.RadioButton;
  [Bindable] protected var numOfIncorrectAnswers:int = 0;
  [Bindable] public var lessons:ArrayCollection;
  
  [Bindable] protected var questions:ArrayCollection;
  public var rb:spark.components.RadioButton;
  [Bindable] protected var currentQuestionPool:QuestionPool;
  [Bindable] protected var currentQuestion:Question;
  
  [Bindable]
  public var userID:String;
  [Bindable]
  public var lockoutStamp;
  
  
  
  
  
  public function buildQuiz(data:*):void
  {
  for each(var qp:Object in data.questionPool)
  {
  var questionPool:QuestionPool = new QuestionPool();
  for each(var q:Object in qp.question)
  {
  var nav:NavigatorContent = new NavigatorContent();
  nav.percentHeight = nav.percentWidth = 100;
  var question:Question = new Question();
  question.type = q.type;
  question.questionText = q.text;
  question.audio = q.audio;
  question.cardinality = q.cardinality;
  question.pool = qp.number;
  question.correctAudio = qp.correctResponse.audio;
  question.correctText = qp.correctResponse.text;
  question.incorrectAudio = qp.incorrectResponse.audio;
  questio n.incorrectVideo = qp.incorrectResponse.video;
  nav.addElement(question);
  for each(var r:Object in q.response)
  {
  question.rb = new spark.components.RadioButton();
  question.rb.groupName = 'questionPool';
  question.rb.label = r.text;
  question.rb.setStyle('color', 'white');
  question.rb.setStyle('fontSize', 14);
  question.rb.name = (r.correct == 0) ? 'false' : 'true';
  question.addElement(question.rb);
  }
  questionPool.addElement(nav);
  stack.addElement(questionPool);
  }
  }
  currentQuestionPool = QuestionPool(stack.selectedChild);
  currentQuestion = NavigatorContent(currentQuestionPool.selectedChild).getElementAt(0) as Question;
  currentQuestion.soundPlayer.play();
  }
  
  public function stepToNextQuestionPool(model:ResponseTextModel):void
  {
  stack.selectedIndex += 1;
  currentQuestionPool = QuestionPool(stack.selectedChild);
  currentQuestion = NavigatorContent(currentQuestionPool.selectedChild).getElementAt(0) as Question;
  SoundMixer.stopAll();
  currentQuestion.soundPlayer.play();
  model.numIncorrectAnswers = 0;
  }
  
  public function stepToNextQuestion():void
  {
  //numOfIncorrectAnswers++;
  //				if(numOfIncorrectAnswers < 2)
  //				{
  currentQuestionPool.selectedIndex += 1;
  currentQuestionPool = QuestionPool(stack.selectedChild);
  currentQuestion = NavigatorContent(currentQuestionPool.selectedChild).getElementAt(0) as Question;
  SoundMixer.stopAll();
  currentQuestion.soundPlayer.play();
  //				}	
  //				else
  //				{	
  //					stepToNextQuestionPool();
  //				}
  //				Alert.show(String(numOfIncorrectAnswers));
  }
  
  public function lockoutUser():void
  {		
  var localDate:Date = new Date();
  var localTimestamp:Number = localDate.valueOf() / 1000; 
  //date with valueOf function returns the milliseconds and divide by 1000 to convert to seconds 
  var timzoneOffset:Number = localDate.timezoneOffset * 60;
  //Timezone offset returns the minutes and multiply by 60 to convert to seconds to use for timestamp
  lockoutStamp = localTimestamp + timzoneOffset;
  
  getUserId();
  
  Alert.show("This course cannot be successfully'\n'completed today because there are more'\n' incorrect question answers than allowed.'\n'The system is now locked until 8am tomorrow morning.'\n'After that time, you will be able to enter the system and retake this course or begin another one.", 'Lockout', Alert.OK);
  }
  
  public function resetQuiz():void
  {
  stack.selectedIndex = 0;
  currentQuestionPool = QuestionPool(stack.selectedChild);
  currentQuestion = NavigatorContent(currentQuestionPool.selectedChild).getElementAt(0) as Question;
  currentQuestion.questionPool.selection = null;
  SoundMixer.stopAll();
  currentQuestion.soundPlayer.play();
  }
  
  
  /****LOCKOUT  FUNCTIONS*****/
  
  
  
  //Actionscript for database connection to dokeos
  
  //SQL Token
  private var sqlToken:AsyncToken;
  
  /********************************************************
  * Your Configuration Paramaters
  * 
  *********************************************************/
  //Enter the name of your database
  public var mysql_db:String = "dokeos_main"; 
  
  //Enter the url to the php file you placed on your MySQL webserver
  public var mysql_url:String = "http://tlpadev.ecistm.com/main/flex_mysql/flexmysqlconn.php"; 
  
  
  // Enter your sql passcode this should be a 10 digit string of letter and numbers
  // that you make up to minimize the risk of SQL injection against your PHP script.
  // This can be anything you want. You will also use this same code in your PHP file. 
  
  public var private_key:String = "01234ABCDE";
  
  
  
  /********************************************************
  * MySQL Query Function
  ********************************************************/
  public function mysqlQuery(sql:String,fid:String):void 
  {
  var http:HTTPService = new HTTPService;
  var parm:Object = new Object;
  parm.fas_sql = sql;
  parm.private_key = private_key;
  parm.fas_db = mysql_db;
  http.url = mysql_url+"?irand="+Math.random();
  
  http.showBusyCursor = true;
  http.request = sql;
  http.addEventListener(ResultEvent.RESULT, mysqlResult);
  http.addEventListener(FaultEvent.FAULT, mysqlFault);
  http.method = "POST";
  
  sqlToken = http.send(parm);
  sqlToken.param = fid;
  }
  
  private function mysqlFault(event:FaultEvent):void {
  var err:String = event.fault.faultString;
  Alert.show(err);
  
  }
  
  /********************************************************
  * mysqlResult() should be used to handle all of the
  * returns of your queries. This will end up being a 
  * long case list.
  * 
  *********************************************************/
  
  
  private function mysqlResult(event:ResultEvent):void{
  
  //Note: All Results are stored in the
  // event.result object
  
  //Create a new case/break for each of your
  //sql query statements
  
  switch(event.token.param){
  case "showUsers":
  //showUsers();	
  //dgUsers.dataProvider = event.result.results.record;
  //Alert.show(event.result.results.record);
  
  break;	
  
  case "updateUser":
  
  
  break;
  
  case "getUserFromUserId":
  
  
  break;
  case "insertLockoutUser":
  
  break;
  
  
  
  }	
  }
  
  /********************************************************
  * Functions: Shared Functions
  * 
  *********************************************************/
  
  public function addslashes(tt:String):String{
  var ttt:String = tt.replace(/\u0027+/g,"\\'");
  return ttt;
  }
  
  
  public var rec_id:String = "";
  
  /* Assign values to new properties. */
  
  public function showUsers():void{
  mysqlQuery("SELECT * FROM user","showUsers");
  
  }
  
  /*	public function getUserFromUserId():void{
  mysqlQuery("SELECT * FROM user WHERE user_id = " + userID, 'getUserFromUserId');
  
  }
  */	
  public function updateUser():void
  {
  mysqlQuery("UPDATE user SET active ='0' WHERE user_id = '" + userID +"'"  , 'updateUser');
  
  }
  
  public function updateTimestamp():void
  {
  mysqlQuery("UPDATE user SET course_timestamp ='"+ lockoutStamp +"' WHERE user_id = '" + userID +"'"  , 'updateTimestamp');
  
  }
  
  
  public function insertLockoutUser():void {
  
  mysqlQuery("INSERT INTO user_lockout (user_id) " + 
  "VALUES " + 
  "('" + userID+ "')", "InsertLockoutUser");
  
  }
  
  public function getUserId():void
  {
  var Obj:Object=new Object();
  kill_HttpServ.method="POST";
  kill_HttpServ.send();
  
  updateUser();
  updateTimestamp();
  insertLockoutUser();
  }
  
  private function fnHandleFault(event:FaultEvent):void{
  Alert.show("Error ID="+event.fault.errorID+"  faultString="+event.fault.faultString);
  }
  
  private function fnDiplayResult(event:ResultEvent):void{
  
  userID=event.result.toString();
  Alert.show(userID+"You are not logged into tlpa.ecistm.com");
  }
  
  
  
  </fx:Script><fx:Declarations><mx:HTTPService id="kill_HttpServ" url="http://tlpadev.ecistm.com/main/flex_mysql/killSession.php" result="fnDiplayResult(event)" fault="fnHandleFault(event)"/></fx:Declarations>
	<s:layout><s:VerticalLayout paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10"/></s:layout>
	<components:TLPAQuizTitle/><s:BorderContainer height="100%" width="100%" backgroundImage="@Embed('assets/images/taxi_dark2.jpg')" borderVisible="true" cornerRadius="10">
								   <s:layout><s:VerticalLayout paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10"/></s:layout>
								   								   <mx:ViewStack id="stack" width="100%" height="100%">
																																																																																																																																																					  
																																																																																																																																																				  </mx:ViewStack></s:BorderContainer><s:HGroup width="100%" horizontalAlign="right"><components:SubmitButton/></s:HGroup></s:BorderContainer>