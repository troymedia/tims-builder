<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   backgroundColor="0x333333"
				   xmlns:components="com.ecistm.tlpa.components.*"
				   xmlns:views="com.ecistm.tlpa.views.*"
				   cornerRadius="10" >
	<fx:Declarations>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.ecistm.tlpa.components.ResponseWithImage;
			import com.ecistm.tlpa.models.FeedbackImagesModel;
			import com.ecistm.tlpa.models.LessonsModel;
			import com.ecistm.tlpa.models.ResponseTextModel;
			
			import flash.media.*;
			import flash.net.URLRequest;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.RadioButton;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.Button;
			import spark.components.NavigatorContent;
			import spark.components.RadioButton;
			
			[Bindable] protected var numOfIncorrectAnswers:int = 0;
			[Bindable] public var lessons:ArrayCollection;
			protected var question:Question;
			[Bindable] protected var questions:ArrayCollection;
			public var rb:spark.components.RadioButton;
			[Bindable] protected var currentQuestionPool:QuestionPool;
			[Bindable] protected var currentQuestion:Question;
			public function buildQuiz(data:*):void
			{
//				for each(var qp:Object in data.questionPool)
				for each(var qp:Object in data.lesson.questionPool)
				{
					var questionPool:QuestionPool = new QuestionPool();
					for each(var q:Object in qp.question)
					{
//						Alert.show(q.text);
						var nav:NavigatorContent = new NavigatorContent();
						nav.percentHeight = nav.percentWidth = 100;
						question = new Question();
						question.type = q.type;
						question.questionText = q.text;
						question.audio = q.audio;
						question.cardinality = q.cardinality;
						question.pool = qp.number;
						question.randomize = q.randomize;
						question.correctAudio = qp.correctResponse.audio;
						question.correctText = qp.correctResponse.text;
						nav.addElement(question);
						for each(var r:Object in q.response)
						{
//							question.responses.addItem(r.text);
//							question.cbGroup.multiSelect = (question.cardinality == 'single') ? false : true;
							if(q.type != 'MCG')
							{
								question.rb = new spark.components.RadioButton();
								question.rb.groupName = 'questionPool';
								question.rb.label = r.text;
								question.rb.setStyle('color', 'white');
								question.rb.setStyle('fontSize', 14);
								question.rb.name = (r.correct == 0) ? 'false' : 'true';
								question.btnContainer.addElement(question.rb);
							}
							else
							{
								//Alert.show(r.text);
								var mcgImage:ResponseWithImage = new ResponseWithImage();
								mcgImage.imageSource = r.image;
								mcgImage.buttonLabel = r.text;
								mcgImage.button.groupName = 'questionPool';
								question.imgWithAnswerContainer.addElement(mcgImage);
//								Alert.show(mcgImage.imageSource);
							}
						}
						questionPool.addElement(nav);
						stack.addElement(questionPool);
					}
				}
				currentQuestionPool = QuestionPool(stack.selectedChild);
				currentQuestion = NavigatorContent(currentQuestionPool.selectedChild).getElementAt(0) as Question;
				currentQuestion.soundPlayer.play();
				currentQuestion.currentState = currentQuestion.type;
//				Alert.show(currentQuestion.audio);
			}
			
			public function stepToNextQuestionPool(model:ResponseTextModel):void
			{
				//updateCurrentState(currentQuestion.currentState);
				stack.selectedIndex += 1;
				currentQuestionPool = QuestionPool(stack.selectedChild);
				currentQuestion = NavigatorContent(currentQuestionPool.selectedChild).getElementAt(0) as Question;
				stopAllSounds();
				currentQuestion.soundPlayer.play();
				model.numIncorrectAnswers = 0;
				currentQuestion.currentState = currentQuestion.type;
//				Alert.show(currentQuestion.currentState);
				updateCurrentState(currentQuestion.currentState);
			}
			
			public function stepToNextQuestion():void
			{
				currentQuestionPool.selectedIndex += 1;
				currentQuestionPool = QuestionPool(stack.selectedChild);
				currentQuestion = NavigatorContent(currentQuestionPool.selectedChild).getElementAt(0) as Question;
				stopAllSounds();
				currentQuestion.soundPlayer.play();
				currentQuestion.currentState = currentQuestion.type;
//				Alert.show(currentQuestion.currentState);
				updateCurrentState(currentQuestion.currentState);
			}
			
			public function resetQuiz():void
			{
				stack.selectedIndex = 0;
				currentQuestionPool = QuestionPool(stack.selectedChild);
				currentQuestion = NavigatorContent(currentQuestionPool.selectedChild).getElementAt(0) as Question;
				currentQuestion.questionPool.selection = null;
				stopAllSounds();
				currentQuestion.soundPlayer.play();
			}
			
			protected function updateCurrentState(state:String):void
			{
//				Alert.show('..' + state);
				if(state == 'MCG')
				{
					question.currentState = 'MCG';
				}
			}
			
			public function showSuccessView():void
			{
				currentState = 'quizSuccessView';
				stopAllSounds();
			}
			
			protected function stopAllSounds():void
			{
				SoundMixer.stopAll();
			}
			
			
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10"/>
	</s:layout>
	
	<s:states>
		<s:State name="quizView"/>
		<s:State name="quizSuccessView"/>
		
	</s:states>
	
	<components:TLPAQuizTitle/>
	
	<s:BorderContainer height="100%" width="100%" backgroundImage="@Embed('assets/images/common/taxi_dark2.jpg')" borderVisible="true"
					   cornerRadius="10"
					   >
		<s:layout>
			<s:VerticalLayout paddingTop="10" paddingLeft="10" paddingRight="10" paddingBottom="10"
							  />
		</s:layout>
		
		<mx:ViewStack id="stack" width="100%" height="100%" includeIn="quizView">
			
		</mx:ViewStack>
		
		<views:SuccessView includeIn="quizSuccessView"/>
		
	</s:BorderContainer>
	
	<s:HGroup width="100%" horizontalAlign="right">
		<components:SubmitButton/>
	</s:HGroup>
	
</s:BorderContainer>
